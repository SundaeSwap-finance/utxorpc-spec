// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/sync/v1/sync.proto

package syncv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/utxorpc/sync/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChainSyncServiceName is the fully-qualified name of the ChainSyncService service.
	ChainSyncServiceName = "utxorpc.sync.v1.ChainSyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChainSyncServiceStreamBlocksProcedure is the fully-qualified name of the ChainSyncService's
	// StreamBlocks RPC.
	ChainSyncServiceStreamBlocksProcedure = "/utxorpc.sync.v1.ChainSyncService/StreamBlocks"
	// ChainSyncServiceFetchBlocksProcedure is the fully-qualified name of the ChainSyncService's
	// FetchBlocks RPC.
	ChainSyncServiceFetchBlocksProcedure = "/utxorpc.sync.v1.ChainSyncService/FetchBlocks"
)

// ChainSyncServiceClient is a client for the utxorpc.sync.v1.ChainSyncService service.
type ChainSyncServiceClient interface {
	StreamBlocks(context.Context, *connect_go.Request[v1.StreamBlocksRequest]) (*connect_go.ServerStreamForClient[v1.StreamBlocksResponse], error)
	FetchBlocks(context.Context, *connect_go.Request[v1.FetchBlocksRequest]) (*connect_go.Response[v1.FetchBlocksResponse], error)
}

// NewChainSyncServiceClient constructs a client for the utxorpc.sync.v1.ChainSyncService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChainSyncServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChainSyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chainSyncServiceClient{
		streamBlocks: connect_go.NewClient[v1.StreamBlocksRequest, v1.StreamBlocksResponse](
			httpClient,
			baseURL+ChainSyncServiceStreamBlocksProcedure,
			opts...,
		),
		fetchBlocks: connect_go.NewClient[v1.FetchBlocksRequest, v1.FetchBlocksResponse](
			httpClient,
			baseURL+ChainSyncServiceFetchBlocksProcedure,
			opts...,
		),
	}
}

// chainSyncServiceClient implements ChainSyncServiceClient.
type chainSyncServiceClient struct {
	streamBlocks *connect_go.Client[v1.StreamBlocksRequest, v1.StreamBlocksResponse]
	fetchBlocks  *connect_go.Client[v1.FetchBlocksRequest, v1.FetchBlocksResponse]
}

// StreamBlocks calls utxorpc.sync.v1.ChainSyncService.StreamBlocks.
func (c *chainSyncServiceClient) StreamBlocks(ctx context.Context, req *connect_go.Request[v1.StreamBlocksRequest]) (*connect_go.ServerStreamForClient[v1.StreamBlocksResponse], error) {
	return c.streamBlocks.CallServerStream(ctx, req)
}

// FetchBlocks calls utxorpc.sync.v1.ChainSyncService.FetchBlocks.
func (c *chainSyncServiceClient) FetchBlocks(ctx context.Context, req *connect_go.Request[v1.FetchBlocksRequest]) (*connect_go.Response[v1.FetchBlocksResponse], error) {
	return c.fetchBlocks.CallUnary(ctx, req)
}

// ChainSyncServiceHandler is an implementation of the utxorpc.sync.v1.ChainSyncService service.
type ChainSyncServiceHandler interface {
	StreamBlocks(context.Context, *connect_go.Request[v1.StreamBlocksRequest], *connect_go.ServerStream[v1.StreamBlocksResponse]) error
	FetchBlocks(context.Context, *connect_go.Request[v1.FetchBlocksRequest]) (*connect_go.Response[v1.FetchBlocksResponse], error)
}

// NewChainSyncServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChainSyncServiceHandler(svc ChainSyncServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ChainSyncServiceStreamBlocksProcedure, connect_go.NewServerStreamHandler(
		ChainSyncServiceStreamBlocksProcedure,
		svc.StreamBlocks,
		opts...,
	))
	mux.Handle(ChainSyncServiceFetchBlocksProcedure, connect_go.NewUnaryHandler(
		ChainSyncServiceFetchBlocksProcedure,
		svc.FetchBlocks,
		opts...,
	))
	return "/utxorpc.sync.v1.ChainSyncService/", mux
}

// UnimplementedChainSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChainSyncServiceHandler struct{}

func (UnimplementedChainSyncServiceHandler) StreamBlocks(context.Context, *connect_go.Request[v1.StreamBlocksRequest], *connect_go.ServerStream[v1.StreamBlocksResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.sync.v1.ChainSyncService.StreamBlocks is not implemented"))
}

func (UnimplementedChainSyncServiceHandler) FetchBlocks(context.Context, *connect_go.Request[v1.FetchBlocksRequest]) (*connect_go.Response[v1.FetchBlocksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.sync.v1.ChainSyncService.FetchBlocks is not implemented"))
}
