syntax = "proto3";

package utxorpc.ledger.v1;

// Represents a stake credential in Cardano.
message StakeCredential {
  oneof stake_credential {
    bytes addr_key_hash = 1; // Address key hash.
    bytes script_hash = 2; // Script hash.
  }
}

// Represents a unit interval in Cardano.
message UnitInterval {
  // Define the fields of UnitInterval based on your original Rust code
}

// Represents a relay in Cardano.
message Relay {
  // Define the fields of Relay based on your original Rust code
}

// Represents pool metadata in Cardano.
message PoolMetadata {
  // Define the fields of PoolMetadata based on your original Rust code
}

// Represents a certificate in Cardano.
message Certificate {
  oneof certificate {
    StakeCredential stake_registration = 1; // Stake registration certificate.
    StakeCredential stake_deregistration = 2; // Stake deregistration certificate.
    StakeDelegationCert stake_delegation = 3; // Stake delegation certificate.
    PoolRegistrationCert pool_registration = 4; // Pool registration certificate.
    PoolRetirementCert pool_retirement = 5; // Pool retirement certificate.
    GenesisKeyDelegationCert genesis_key_delegation = 6; // Genesis key delegation certificate.
    MoveInstantaneousRewardCert move_instantaneous_rewards_cert = 7; // Move instantaneous rewards certificate.
  }
}

// Represents a stake delegation certificate in Cardano.
message StakeDelegationCert {
  StakeCredential stake_credential = 1; // Stake credential.
  bytes pool_keyhash = 2; // Pool key hash.
}

// Represents a pool registration certificate in Cardano.
message PoolRegistrationCert {
  bytes operator = 1; // Operator key hash.
  bytes vrf_keyhash = 2; // VRF key hash.
  uint64 pledge = 3; // Pledge amount.
  uint64 cost = 4; // Pool cost.
  UnitInterval margin = 5; // Pool margin.
  bytes reward_account = 6; // Reward account.
  repeated bytes pool_owners = 7; // List of pool owner key hashes.
  repeated Relay relays = 8; // List of relays.
  PoolMetadata pool_metadata = 9; // Pool metadata.
}

// Represents a pool retirement certificate in Cardano.
message PoolRetirementCert {
  bytes pool_keyhash = 1; // Pool key hash.
  uint64 epoch = 2; // Retirement epoch.
}

// Represents a genesis key delegation certificate in Cardano.
message GenesisKeyDelegationCert {
  bytes genesis_hash = 1; // Genesis hash.
  bytes genesis_delegate_hash = 2; // Genesis delegate hash.
  bytes vrf_keyhash = 3; // VRF key hash.
}

// Represents a move instantaneous reward certificate in Cardano.
message MoveInstantaneousRewardCert {
  // Define the fields of MoveInstantaneousReward based on your original Rust code
}
