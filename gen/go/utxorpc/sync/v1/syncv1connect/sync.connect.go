// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/sync/v1/sync.proto

package syncv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/utxorpc/sync/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChainSyncName is the fully-qualified name of the ChainSync service.
	ChainSyncName = "utxorpc.sync.v1.ChainSync"
)

// ChainSyncClient is a client for the utxorpc.sync.v1.ChainSync service.
type ChainSyncClient interface {
	StreamBlocks(context.Context, *connect_go.Request[v1.BlockStreamRequest]) (*connect_go.ServerStreamForClient[v1.Block], error)
	FetchBlock(context.Context, *connect_go.Request[v1.BlockFetchRequest]) (*connect_go.Response[v1.Block], error)
}

// NewChainSyncClient constructs a client for the utxorpc.sync.v1.ChainSync service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChainSyncClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChainSyncClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chainSyncClient{
		streamBlocks: connect_go.NewClient[v1.BlockStreamRequest, v1.Block](
			httpClient,
			baseURL+"/utxorpc.sync.v1.ChainSync/StreamBlocks",
			opts...,
		),
		fetchBlock: connect_go.NewClient[v1.BlockFetchRequest, v1.Block](
			httpClient,
			baseURL+"/utxorpc.sync.v1.ChainSync/FetchBlock",
			opts...,
		),
	}
}

// chainSyncClient implements ChainSyncClient.
type chainSyncClient struct {
	streamBlocks *connect_go.Client[v1.BlockStreamRequest, v1.Block]
	fetchBlock   *connect_go.Client[v1.BlockFetchRequest, v1.Block]
}

// StreamBlocks calls utxorpc.sync.v1.ChainSync.StreamBlocks.
func (c *chainSyncClient) StreamBlocks(ctx context.Context, req *connect_go.Request[v1.BlockStreamRequest]) (*connect_go.ServerStreamForClient[v1.Block], error) {
	return c.streamBlocks.CallServerStream(ctx, req)
}

// FetchBlock calls utxorpc.sync.v1.ChainSync.FetchBlock.
func (c *chainSyncClient) FetchBlock(ctx context.Context, req *connect_go.Request[v1.BlockFetchRequest]) (*connect_go.Response[v1.Block], error) {
	return c.fetchBlock.CallUnary(ctx, req)
}

// ChainSyncHandler is an implementation of the utxorpc.sync.v1.ChainSync service.
type ChainSyncHandler interface {
	StreamBlocks(context.Context, *connect_go.Request[v1.BlockStreamRequest], *connect_go.ServerStream[v1.Block]) error
	FetchBlock(context.Context, *connect_go.Request[v1.BlockFetchRequest]) (*connect_go.Response[v1.Block], error)
}

// NewChainSyncHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChainSyncHandler(svc ChainSyncHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/utxorpc.sync.v1.ChainSync/StreamBlocks", connect_go.NewServerStreamHandler(
		"/utxorpc.sync.v1.ChainSync/StreamBlocks",
		svc.StreamBlocks,
		opts...,
	))
	mux.Handle("/utxorpc.sync.v1.ChainSync/FetchBlock", connect_go.NewUnaryHandler(
		"/utxorpc.sync.v1.ChainSync/FetchBlock",
		svc.FetchBlock,
		opts...,
	))
	return "/utxorpc.sync.v1.ChainSync/", mux
}

// UnimplementedChainSyncHandler returns CodeUnimplemented from all methods.
type UnimplementedChainSyncHandler struct{}

func (UnimplementedChainSyncHandler) StreamBlocks(context.Context, *connect_go.Request[v1.BlockStreamRequest], *connect_go.ServerStream[v1.Block]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.sync.v1.ChainSync.StreamBlocks is not implemented"))
}

func (UnimplementedChainSyncHandler) FetchBlock(context.Context, *connect_go.Request[v1.BlockFetchRequest]) (*connect_go.Response[v1.Block], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.sync.v1.ChainSync.FetchBlock is not implemented"))
}
