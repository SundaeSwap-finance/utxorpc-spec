// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: utxorpc/watch/v1/watch.proto

package watchv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-tour/gen/utxorpc/watch/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WatchName is the fully-qualified name of the Watch service.
	WatchName = "utxorpc.watch.v1.Watch"
)

// WatchClient is a client for the utxorpc.watch.v1.Watch service.
type WatchClient interface {
	WaitForTx(context.Context, *connect_go.Request[v1.WaitForTxRequest]) (*connect_go.ServerStreamForClient[v1.Tx], error)
	FollowTx(context.Context, *connect_go.Request[v1.WaitForTxRequest]) (*connect_go.ServerStreamForClient[v1.Tx], error)
}

// NewWatchClient constructs a client for the utxorpc.watch.v1.Watch service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWatchClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WatchClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &watchClient{
		waitForTx: connect_go.NewClient[v1.WaitForTxRequest, v1.Tx](
			httpClient,
			baseURL+"/utxorpc.watch.v1.Watch/WaitForTx",
			opts...,
		),
		followTx: connect_go.NewClient[v1.WaitForTxRequest, v1.Tx](
			httpClient,
			baseURL+"/utxorpc.watch.v1.Watch/FollowTx",
			opts...,
		),
	}
}

// watchClient implements WatchClient.
type watchClient struct {
	waitForTx *connect_go.Client[v1.WaitForTxRequest, v1.Tx]
	followTx  *connect_go.Client[v1.WaitForTxRequest, v1.Tx]
}

// WaitForTx calls utxorpc.watch.v1.Watch.WaitForTx.
func (c *watchClient) WaitForTx(ctx context.Context, req *connect_go.Request[v1.WaitForTxRequest]) (*connect_go.ServerStreamForClient[v1.Tx], error) {
	return c.waitForTx.CallServerStream(ctx, req)
}

// FollowTx calls utxorpc.watch.v1.Watch.FollowTx.
func (c *watchClient) FollowTx(ctx context.Context, req *connect_go.Request[v1.WaitForTxRequest]) (*connect_go.ServerStreamForClient[v1.Tx], error) {
	return c.followTx.CallServerStream(ctx, req)
}

// WatchHandler is an implementation of the utxorpc.watch.v1.Watch service.
type WatchHandler interface {
	WaitForTx(context.Context, *connect_go.Request[v1.WaitForTxRequest], *connect_go.ServerStream[v1.Tx]) error
	FollowTx(context.Context, *connect_go.Request[v1.WaitForTxRequest], *connect_go.ServerStream[v1.Tx]) error
}

// NewWatchHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWatchHandler(svc WatchHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/utxorpc.watch.v1.Watch/WaitForTx", connect_go.NewServerStreamHandler(
		"/utxorpc.watch.v1.Watch/WaitForTx",
		svc.WaitForTx,
		opts...,
	))
	mux.Handle("/utxorpc.watch.v1.Watch/FollowTx", connect_go.NewServerStreamHandler(
		"/utxorpc.watch.v1.Watch/FollowTx",
		svc.FollowTx,
		opts...,
	))
	return "/utxorpc.watch.v1.Watch/", mux
}

// UnimplementedWatchHandler returns CodeUnimplemented from all methods.
type UnimplementedWatchHandler struct{}

func (UnimplementedWatchHandler) WaitForTx(context.Context, *connect_go.Request[v1.WaitForTxRequest], *connect_go.ServerStream[v1.Tx]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.watch.v1.Watch.WaitForTx is not implemented"))
}

func (UnimplementedWatchHandler) FollowTx(context.Context, *connect_go.Request[v1.WaitForTxRequest], *connect_go.ServerStream[v1.Tx]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("utxorpc.watch.v1.Watch.FollowTx is not implemented"))
}
