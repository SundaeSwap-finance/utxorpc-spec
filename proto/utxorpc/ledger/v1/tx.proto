syntax = "proto3";

package utxorpc.ledger.v1;

import "utxorpc/ledger/v1/certs.proto";
import "utxorpc/ledger/v1/metadata.proto";
import "utxorpc/ledger/v1/primitives.proto";
import "utxorpc/ledger/v1/scripts.proto";

// Purpose of the redeemer in a transaction.
enum Purpose {
  NO_PURPOSE = 0;
  SPEND = 1;
  MINT = 2;
  CERT = 3;
  REWARD = 4;
}

// Redeemer information for a Plutus script.
message Redeemer {
  Purpose purpose = 1; // Purpose of the redeemer.
  PlutusData datum = 2; // Plutus data associated with the redeemer.
}

// Represents a transaction input in the Cardano blockchain.
message TxInput {
  bytes tx_hash = 1; // Hash of the previous transaction.
  uint32 output_index = 2; // Index of the output in the previous transaction.
  TxOutput as_output = 3; // Content of the input represented as output of the related transaction
}

// Represents a transaction output in the Cardano blockchain.
message TxOutput {
  bytes address = 1; // Address receiving the output.
  Coin coin = 2; // Amount of ADA in the output.
  repeated Multiasset assets = 3; // Additional native (non-ADA) assets in the output.
  PlutusData datum = 4; // Plutus data associated with the output.
  bytes datum_hash = 5; // Hash of the Plutus data.
  Script script = 6; // Script associated with the output.
  Redeemer redeemer = 7; // Redeemer for the Plutus script.
}

// Represents a custom asset in the Cardano blockchain.
message Asset {
  bytes name = 1; // Name of the custom asset.
  uint64 quantity = 2; // Quantity of the custom asset.
}

// Represents a multi-asset group in the Cardano blockchain.
message Multiasset {
  bytes policy_id = 1; // Policy ID governing the custom assets.
  repeated Asset assets = 2; // List of custom assets.
}

// Represents the validity interval of a transaction.
message TxValidity {
  uint64 start = 1; // Start of the validity interval.
  uint64 ttl = 2; // End of the validity interval (TTL: Time to Live).
}

// Represents the collateral information for a transaction.
message Collateral {
  repeated TxInput collateral = 1; // Collateral inputs for the transaction.
  TxOutput collateral_return = 2; // Collateral return in case of script failure.
  Coin total_collateral = 3; // Total amount of collateral.
}

// Represents a withdrawal from a reward account.
message Withdrawal {
  bytes reward_account = 1; // Address of the reward account.
  Coin coin = 2; // Amount of ADA withdrawn.
}

// Represents a set of witnesses that validate a transaction
message WitnessSet {
  repeated VKeyWitness vkeywitness = 1; // List of VKey witnesses.
  repeated Script script = 2; // List of scripts.
  repeated PlutusData plutus_datums = 3; // List of Plutus data elements associated with the transaction.
}

// Auxiliary data not directly tied to the validation process
message AuxData {
  repeated Metadata metadata = 1; // List of auxiliary metadata elements.
  repeated Script scripts = 2; // List of auxiliary scripts.
}

// Represents a transaction in the Cardano blockchain.
message Tx {
  repeated TxInput inputs = 1; // List of transaction inputs
  repeated TxOutput outputs = 2; // List of transaction outputs
  repeated Certificate certificates = 3; // List of certificates
  repeated Withdrawal withdrawals = 4; // List of withdrawals
  repeated Multiasset mint = 5; // List of minted custom assets
  repeated TxInput reference_inputs = 6; // List of reference inputs
  WitnessSet witnesses = 7; // Witnesses that validte the transaction
  Collateral collateral = 8; // Collateral details in case of failed transaction
  uint64 fee = 9; // Transaction fee in ADA
  TxValidity validity = 10; // Validity interval of the transaction
  bool successful = 11; // Flag indicating whether the transaction was successful
  AuxData auxiliary = 12; // Auxiliary data not directly tied to the validation process
}

// Represents a VKey witness used to sign a transaction.
message VKeyWitness {
  bytes vkey = 1; // Verification key.
  bytes signature = 2; // Signature generated using the associated private key.
}
